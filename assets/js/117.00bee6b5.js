(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{727:function(e,t,a){"use strict";a.r(t);var n=a(0),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"sync-async-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sync-async-functions"}},[e._v("#")]),e._v(" Sync / Async Functions")]),e._v(" "),a("p",[e._v("In this chapter, we focus on the aspect of "),a("em",[a("strong",[e._v("asynchronous communication between smart contracts")])]),e._v(".")]),e._v(" "),a("p",[e._v("In synchronous architecture, when a process executes a request, it waits until the execution is complete and then returns the result. The process pauses during that time. After the request is sent, the asynchronous process (usually a thread) runs in the back and the main process goes ahead to handle other executions. When the asynchronous process completes, the main process will receive a notification with the return result.")]),e._v(" "),a("p",[e._v("The advantages of asynchronous architecture are obvious â€” it will be much faster when running a batch of executions. Vite adopts a DAG-based ledger, where each address has a separate account chain. A transaction only changes the state of one account chain, so transactions of multiple addresses can be executed in parallel to achieve higher throughput.")]),e._v(" "),a("p",[e._v("Unlike Ethereum, Vite is an asynchronous blockchain, calls to smart contracts on Vite are also asynchronous, that is, the return value cannot be obtained immediately after the call.")]),e._v(" "),a("p",[e._v("The following is a simple example to introduce the asynchronous syntax in Solidity++.")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"solidity",base64:"Ly8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0zLjAKcHJhZ21hIHNvbGlkaXR5cHAgJmd0Oz0wLjguMCAmbHQ7MC45LjA7Cgpjb250cmFjdCBTaW1wbGVTdG9yYWdlIHsKICAgIHVpbnQgc3RvcmVkRGF0YTsKCiAgICBmdW5jdGlvbiBzZXQodWludCB4KSBleHRlcm5hbCB7CiAgICAgICAgc3RvcmVkRGF0YSA9IHg7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0KCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHN0b3JlZERhdGE7CiAgICB9Cn0K"}}),e._v(" "),a("p",[e._v("There are two functions in the "),a("strong",[e._v("SimpleStorage")]),e._v(" contract. The syntax of function declarations is the same as Solidity, but the semantics are different.")]),e._v(" "),a("p",[e._v("A function of a Vite contract is an "),a("em",[e._v("async function")]),e._v(".")]),e._v(" "),a("blockquote",[a("p",[e._v("An "),a("em",[e._v("async function")]),e._v(" does not execute or return result in the request transaction but in a subsequent response transaction.")])]),e._v(" "),a("p",[e._v("Let's dive deeper with a more advanced example.")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"solidity",base64:"Ly8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0zLjAKcHJhZ21hIHNvbGlkaXR5cHAgXjAuOC4wOwoKaW50ZXJmYWNlIExpc3RlbmVyIHsKICAgIC8vIGRlY2xhcmUgYSBjYWxsYmFjayB0byByZWNlaXZlIHRoZSByZXN1bHQKICAgIGZ1bmN0aW9uIHN1bSh1aW50IHJlc3VsdCkgZXh0ZXJuYWw7Cn0KCmNvbnRyYWN0IEEgewogICAgdWludCBwdWJsaWMgbGFzdDsKCiAgICBmdW5jdGlvbiBhZGQodWludCBhLCB1aW50IGIpIGV4dGVybmFsIHsKICAgICAgICBsYXN0ID0gYSArIGI7CiAgICAgICAgTGlzdGVuZXIgc2VuZGVyID0gTGlzdGVuZXIobXNnLnNlbmRlcik7CiAgICAgICAgLy8gc2VuZCBtZXNzYWdlIHRvIHRoZSBjYWxsZXIKICAgICAgICBzZW5kZXIuc3VtKGxhc3QpOwogICAgfQp9Cgpjb250cmFjdCBCIGlzIExpc3RlbmVyIHsKICAgIEEgY29udHJhY3RBOwogICAgdWludCBwdWJsaWMgdG90YWw7CgogICAgY29uc3RydWN0b3IgKGFkZHJlc3MgYWRkcikgewogICAgICAgIGNvbnRyYWN0QSA9IEEoYWRkcik7CiAgICB9CgogICAgZnVuY3Rpb24gdGVzdCh1aW50IGEsIHVpbnQgYikgZXh0ZXJuYWwgewogICAgICAgIGNvbnRyYWN0QS5hZGQoYSwgYik7CiAgICB9CgogICAgZnVuY3Rpb24gc3VtKHVpbnQgcmVzdWx0KSBleHRlcm5hbCBvdmVycmlkZSB7CiAgICAgICAgdG90YWwgKz0gcmVzdWx0OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFZpdGVCYWxhbmNlKCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZSgmcXVvdDt0dGlfNTY0OTU0NDUyMDU0NGY0YjQ1NGU2ZTQwJnF1b3Q7KTsKICAgIH0KfQo="}}),e._v(" "),a("ol",[a("li",[e._v("When the client invokes "),a("code",[e._v("B.test()")]),e._v(", a request transaction S1 (client -> contract B) is initiated.")]),e._v(" "),a("li",[e._v("Vite is listening for all open request transactions to the address of contract B. Once the S1 is discovered, Vite VM is activated and the code of "),a("code",[e._v("B.test()")]),e._v(" is executed. A response transaction R1 will be initiated after the execution.")]),e._v(" "),a("li",[e._v("When the "),a("code",[e._v("contractA.add(a, b)")]),e._v(" statement is executed, a new request transaction S2 (contract B -> contract A) is triggered and merged into R1.")]),e._v(" "),a("li",[e._v("When the S2 is accepted by contract A, the code of "),a("code",[e._v("A.add(uint a, uint b)")]),e._v(" is executed and a response transaction R2 will be initiated after the execution.")]),e._v(" "),a("li",[e._v("When the "),a("code",[e._v("sender.sum(last)")]),e._v(" statement is executed, a new request transaction S3 (contract A -> contract B) is triggered to send the result back to B. (S3 will be merged into R2).")]),e._v(" "),a("li",[e._v("When S3 is accepted by contract B, the code of "),a("code",[e._v("B.sum(uint result)")]),e._v(" is executed. The value of storage variable "),a("code",[e._v("total")]),e._v(" is increased by the value from the calldata of S3. After the execution, a response transaction R3 will be initiated.")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Notice")]),e._v(" "),a("p",[e._v("Retrieving the last value with "),a("code",[e._v("contractA.last()")]),e._v(" in contract B will be possible when the "),a("code",[e._v("async")]),e._v(" keyword is be introduced with v0.8.1 of Solidity++. Refer to "),a("RouterLink",{attrs:{to:"/soliditypp/fundamentals/promise-await.html"}},[e._v("Promise and Await")]),e._v(" for details.")],1)])],1)}),[],!1,null,null,null);t.default=s.exports}}]);