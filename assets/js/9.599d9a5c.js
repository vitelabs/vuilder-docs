(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{585:function(e,t,a){e.exports=a.p+"assets/img/await-operator-01.164410b8.png"},586:function(e,t,a){e.exports=a.p+"assets/img/await-operator-02.5cf8de44.png"},587:function(e,t,a){e.exports=a.p+"assets/img/await-operator-03.b0b81e01.png"},708:function(e,t,a){"use strict";a.r(t);var o=a(0),c=Object(o.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"await-operator"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#await-operator"}},[e._v("#")]),e._v(" Await Operator")]),e._v(" "),o("p",[e._v("We covered the "),o("code",[e._v("await")]),e._v(" operator in chapter "),o("RouterLink",{attrs:{to:"/soliditypp/fundamentals/promise-await.html"}},[e._v("Promise and Await")]),e._v(". Let us look at how it is implemented in Vite.")],1),e._v(" "),o("h2",{attrs:{id:"design-objectives"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#design-objectives"}},[e._v("#")]),e._v(" Design Objectives")]),e._v(" "),o("p",[e._v("Let's see a piece of code to know what specific work needs to be done by the compiler and VM:")]),e._v(" "),o("p",[o("img",{attrs:{src:a(585),alt:""}})]),e._v(" "),o("p",[e._v("In summary, there are the following tasks:")]),e._v(" "),o("ul",[o("li",[e._v("To generate callback entries for each synchronous call automatically at compile time.")]),e._v(" "),o("li",[e._v("To initiate a callback request when the result is returned.")]),e._v(" "),o("li",[e._v("To maintain execution context during function invocations and callbacks.")])]),e._v(" "),o("h2",{attrs:{id:"solidity-compiler-and-evm"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#solidity-compiler-and-evm"}},[e._v("#")]),e._v(" Solidity Compiler and EVM")]),e._v(" "),o("p",[e._v("Before starting, let's take a look at the output from Solidity compiler for an example.")]),e._v(" "),o("p",[e._v("Pseudo assembly code for contract "),o("code",[e._v("A")]),e._v(":")]),e._v(" "),o("tm-code-block",{staticClass:"codeblock",attrs:{language:"",base64:"ZnVuY3Rpb25fc2VsZWN0b3I6Cm1ldGhvZF9pZCA6PSBjYWxsZGF0YSgwLCA0KQppZiBtZXRob2RfaWQgPT0gc2lnX2hhc2goYWRkKQogICAganVtcCh0YWdfZnVuY3Rpb25fYWRkKQplbHNlCiAgICBmYWxsYmFjaygpCnN0b3AKCnRhZ19mdW5jdGlvbl9hZGQ6CmEsIGIgOj0gYWJpX2RlY29kZShjYWxsZGF0YSkKdG1wIDo9IGNoZWNrZWRfYWRkKGEsIGIpCnJldCA6PSBhYmlfZW5jb2RlKHRtcCkKcmV0dXJuKHJldCkK"}}),e._v(" "),o("p",[e._v("Pseudo assembly code for contract "),o("code",[e._v("B")]),e._v(":")]),e._v(" "),o("tm-code-block",{staticClass:"codeblock",attrs:{language:"",base64:"ZnVuY3Rpb25fc2VsZWN0b3I6Cm1ldGhvZF9pZCA6PSBjYWxsZGF0YSgwLCA0KQppZiBtZXRob2RfaWQgPT0gc2lnX2hhc2godGVzdCkKICAgIGp1bXAodGFnX2Z1bmN0aW9uX3Rlc3QpCmVsc2UKICAgIGZhbGxiYWNrKCkKc3RvcAoKdGFnX2Z1bmN0aW9uX3Rlc3Q6CmNvbnRyYWN0X2FkZHJlc3MgOj0gY29udHJhY3RBCm1ldGhvZF9pZCA6PSBzaWdfaGFzaChhZGQpCnBhcmFtcyA6PSBhYmlfZW5jb2RlKDEsIDIpCmNhbGwoY29udHJhY3RfYWRkcmVzcywgbWV0aG9kX2lkLCBwYXJhbXMpCnJldCA6PSBhYmlfZGVjb2RlKHJldHVybmRhdGEpCmRhdGEgPSByZXQKcmV0dXJuCg=="}}),e._v(" "),o("p",[e._v("I use an anatomy diagram to show the control flow:")]),e._v(" "),o("p",[o("img",{attrs:{src:a(586),alt:"compiled from solidity"}})]),e._v(" "),o("p",[e._v("As shown by the red arrows in the diagram, the EVM executes external function calls through the "),o("code",[e._v("call")]),e._v(" and "),o("code",[e._v("return")]),e._v(" instructions.")]),e._v(" "),o("p",[e._v("The Solidity compiler will create a piece of code called "),o("em",[e._v("function selector")]),e._v(" for each contract that includes the entries to interface functions of the contract at compile time.")]),e._v(" "),o("p",[e._v("When executing a message call to a contract, EVM extracts the first four bytes from "),o("em",[e._v("calldata")]),e._v(" and compare against the method id of each function, then jump to the definition of a corresponding function and keep executing if they match. Otherwise, jump to the fallback function either defined by user or automatically created by the compiler.")]),e._v(" "),o("p",[e._v("When the "),o("code",[e._v("call")]),e._v(" instruction gets executed, the EVM will retrieve the callee's address and load the calleeâ€™s code from the address and execute the code in an independent context.")]),e._v(" "),o("p",[e._v("When the "),o("code",[e._v("return")]),e._v(" instruction gets executed, the EVM will place the result of the execution into the memory and exits from the callee's code, and then keep executing the remaining code of the caller.")]),e._v(" "),o("h2",{attrs:{id:"solidity-compiler"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#solidity-compiler"}},[e._v("#")]),e._v(" Solidity++ Compiler")]),e._v(" "),o("p",[e._v("Now let's try to extend the functionality of the Solidity compiler, and introduce the following new features:")]),e._v(" "),o("ul",[o("li",[e._v("To generate a callback entry, the compiler needs to traverse all "),o("code",[e._v("await")]),e._v(" expressions in the contract at compile time, add a tag to each position immediately after the "),o("code",[e._v("await")]),e._v(", and add it to the function selector as a callback entry.")]),e._v(" "),o("li",[e._v("To initiate a callback request when the result is returned, we need to re-implement the "),o("code",[e._v("return")]),e._v(" instruction in the Vite VM to initiate a send transaction with type of "),o("code",[e._v("SendCallback")]),e._v(".")]),e._v(" "),o("li",[e._v("To maintain execution context, two new instructions "),o("code",[e._v("synccall")]),e._v(" and "),o("code",[e._v("callbackdest")]),e._v(" need to be introduced into the Vite VM.")])]),e._v(" "),o("p",[e._v("The compiler places a "),o("code",[e._v("synccall")]),e._v(" instruction at each synchronous call. When the VM executes the "),o("code",[e._v("synccall")]),e._v(" instruction, it initiates a send transaction with type of "),o("code",[e._v("SendSyncCall")]),e._v(" and persists the execution context into the local database.")]),e._v(" "),o("p",[e._v("Similarly, the compiler places a "),o("code",[e._v("callbackdest")]),e._v(" instruction at each callback. When the VM executes the "),o("code",[e._v("callbackdest")]),e._v(" instruction, it restores the execution context from the local database and then resumes execution.")]),e._v(" "),o("p",[e._v("This design allows the compiler to generate code that can run on an asynchronous VM for contracts written in a programming language similar to Solidity.")]),e._v(" "),o("p",[e._v("The example will be compiled to the following code:")]),e._v(" "),o("p",[e._v("Pseudo assembly code for contract "),o("code",[e._v("A")]),e._v(":")]),e._v(" "),o("tm-code-block",{staticClass:"codeblock",attrs:{language:"",base64:"ZnVuY3Rpb25fc2VsZWN0b3I6Cm1ldGhvZF9pZCA6PSBjYWxsZGF0YSgwLCA0KQppZiBtZXRob2RfaWQgPT0gc2lnX2hhc2goYWRkKQogICAganVtcCh0YWdfZnVuY3Rpb25fYWRkKQplbHNlCiAgICBmYWxsYmFjaygpCnN0b3AKCnRhZ19mdW5jdGlvbl9hZGQ6CmEsIGIgOj0gYWJpX2RlY29kZShjYWxsZGF0YSkKdG1wIDo9IGNoZWNrZWRfYWRkKGEsIGIpCnJldCA6PSBhYmlfZW5jb2RlKHRtcCkKcmV0dXJuKHJldCkK"}}),e._v(" "),o("p",[e._v("Pseudo assembly code for contract "),o("code",[e._v("B")]),e._v(":")]),e._v(" "),o("tm-code-block",{staticClass:"codeblock",attrs:{language:"",base64:"ZnVuY3Rpb25fc2VsZWN0b3I6Cm1ldGhvZF9pZCA6PSBjYWxsZGF0YSgwLCA0KQppZiBtZXRob2RfaWQgPT0gc2lnX2hhc2godGVzdCkKICAgIGp1bXAodGFnX2Z1bmN0aW9uX3Rlc3QpCiZsdDtzdHJvbmcmZ3Q7ZWxzZSBpZiBtZXRob2RfaWQgPT0gMHgwMDAwMDAwMQogICAganVtcCh0YWdfY2FsbGJhY2tfMDEpJmx0Oy9zdHJvbmcmZ3Q7CmVsc2UKICAgIGZhbGxiYWNrKCkKc3RvcAoKdGFnX2Z1bmN0aW9uX3Rlc3Q6CmNvbnRyYWN0X2FkZHJlc3MgOj0gY29udHJhY3RBCm1ldGhvZF9pZCA6PSBzaWdfaGFzaChhZGQpCnBhcmFtcyA6PSBhYmlfZW5jb2RlKDEsIDIpCiZsdDtzdHJvbmcmZ3Q7Y2FsbGJhY2tfaWQgOj0gMHgwMDAwMDAwMQpzeW5jY2FsbChjb250cmFjdF9hZGRyZXNzLCBtZXRob2RfaWQsIHBhcmFtcywgY2FsbGJhY2tfaWQpJmx0Oy9zdHJvbmcmZ3Q7CnN0b3AKCiZsdDtzdHJvbmcmZ3Q7dGFnX2NhbGxiYWNrXzAxOgpjYWxsYmFja2Rlc3QKcmV0IDo9IGFiaV9kZWNvZGUoY2FsbGRhdGEpCnJldHVybihyZXQpCg=="}}),e._v(" "),o("p",[e._v("Again, let's put these in an anatomy diagram:")]),e._v(" "),o("p",[o("img",{attrs:{src:a(587),alt:"compiled from soliditypp"}})]),e._v(" "),o("p",[e._v("The assembly code in blue is generated by the Solidity++ compiler specifically for the Vite VM.")]),e._v(" "),o("p",[e._v("The orange and green circles represent the "),o("em",[e._v("send")]),e._v(" ("),o("em",[e._v("request")]),e._v(") transaction and "),o("em",[e._v("receive")]),e._v(" ("),o("em",[e._v("response")]),e._v(") transaction initiated by the Vite VM, respectively.")]),e._v(" "),o("p",[e._v("As we can see, the compiler translates each "),o("code",[e._v("await")]),e._v(" expression into a set of instructions in the same pattern: inserting a "),o("code",[e._v("synccall")]),e._v(" instruction, a "),o("code",[e._v("stop")]),e._v(" instruction, a jump dest tag (a "),o("code",[e._v("jumpdest")]),e._v(" instruction), and a "),o("code",[e._v("callbackdest")]),e._v(" instruction.")]),e._v(" "),o("p",[e._v("Essentially, the Vite VM treats the "),o("code",[e._v("synccall")]),e._v(" instruction as an "),o("em",[e._v("interrupt")]),e._v(", which is a request for the VM to interrupt currently executing code, save its context, and initiate an asynchronous request transaction.")]),e._v(" "),o("p",[e._v("Correspondingly, before receiving a callback and resuming execution, the execution context needs to be restored by executing the "),o("code",[e._v("callbackdest")]),e._v(" instruction.")]),e._v(" "),o("p",[e._v("This pattern is known as "),o("em",[e._v("context switch")]),e._v(". In a multi-task system, it refers to the process of storing the system state for a task, so that task can be paused and resumed later.")])],1)}),[],!1,null,null,null);t.default=c.exports}}]);